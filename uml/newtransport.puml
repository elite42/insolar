@startuml

package hostnetwork {

class Host {
NodeID
ShortID
Address
}
class Packet {
Sender
Receiver
Type
RequestID
RemoteAddress
}


class hostTransport {
handlers
processMessage()
}

interface InternalTransport{
PublicAddress()
GetNodeID()
SendRequestPacket()
RegisterPacketHandler()
NewRequestBuilder()
BuildResponse()
}

InternalTransport <|-- hostTransport

interface HostNetwork {
PublicAddress()
GetNodeID()
SendRequest()
RegisterPacketHandler()
NewRequestBuilder()
BuildResponse()
}

class TransportResolvable {
}
HostNetwork <|-- TransportResolvable

interface ConsensusNetwork
class transportConsensus {
buildPacket()
processMessage()
}
ConsensusNetwork <|-- transportConsensus

TransportResolvable --> InternalTransport

abstract class baseTransport {
serializer
proxy
packetHandler
SendRequest()
SendResponse()
SendPacket()
Close()
Packets() <-chan
Stopped() <-chan
PublicAddress()
}
futureManager *-- baseTransport
hostTransport --* baseTransport
}

package transport {
interface Transport {

SenBuffer(address, buff)
Packets() <-chan
Stopped() <-chan
PublicAddress()
}

class futureManager
interface PublicAddressResolver
interface connectionFactory





class tcpTransport {
connectionPool
CreateConnection()
send()
handleAcceptedConnection()
}
class udpTransport {
send()
handleAcceptedConnection()
}

Transport <|-- tcpTransport
Transport <|-- udpTransport

}



package pulsenetwork {
interface PulseDistributor {
Distribute()
}
class distributor
PulseDistributor <|-- distributor
distributor-->InternalTransport
}

package bootstrap {
class bootstrapper {
}
}
bootstrapper --> InternalTransport

transportConsensus --> Transport
hostTransport --> Transport


@enduml
