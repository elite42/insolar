@startuml

package hostnetwork {

class Host {
NodeID
ShortID
Address
}
class Packet {
Sender:Host
Receiver:Host
Type
RequestID
RemoteAddress
Reply()
}


class hostTransport {
handlers
processMessage()
}

interface InternalTransport{
PublicAddress()
GetNodeID()
SendRequestPacket()
RegisterPacketHandler()
NewRequestBuilder()
BuildResponse()
}

InternalTransport <|-- hostTransport

interface HostNetwork {
PublicAddress()
GetNodeID()
SendRequest()
RegisterPacketHandler()
NewRequestBuilder()
BuildResponse()
}



interface ConsensusNetwork
class transportConsensus {
buildPacket()
processMessage()
}
ConsensusNetwork <|-- transportConsensus


abstract class hostTransport {
serializer
proxy
packetHandler
SendRequest()
SendResponse()
SendPacket()
PublicAddress()
}
futureManager *-- hostTransport
HostNetwork <|-- hostTransport

class Address {
protocol
host
port
tcp://node-1.insolar.io:7900/reference
}

}

package transport {
interface Transport {
SendDgram(address, buff)
SenBuffer(address, buff)
}

class futureManager
interface PublicAddressResolver
class ConnectionPool

class transport {
udpConn
tcpConnectionPool
Start()
Stop()
dialTcpConnection()
dialUdpConnection()
handleAcceptedConnection()
}

Transport <|-- transport
}



package pulsenetwork {
interface PulseDistributor {
Distribute()
}
class distributor
PulseDistributor <|-- distributor
distributor-->InternalTransport
}

package bootstrap {
class bootstrapper {
}
}
bootstrapper --> InternalTransport

transportConsensus --> Transport
hostTransport --> Transport


@enduml
